@using ServiceContracts
@using TravelFusionLean.Models
@inject IUserService UserService

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="@model" OnValidSubmit="ResetPassword">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="modal-header">
                        <h5 class="modal-title">Nulstil adgangskode</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>

                    <div class="modal-body">
                        <p>Nulstil adgangskode for: <strong>@SelectedUser?.Username</strong></p>

                        <div class="mb-3">
                            <label for="newPassword" class="form-label">Ny adgangskode</label>
                            <InputText type="password" id="newPassword" class="form-control" @bind-Value="model.NewPassword" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Bekræft adgangskode</label>
                            <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="model.ConfirmPassword" />
                        </div>

                        @if (!string.IsNullOrEmpty(validationMessage))
                        {
                            <div class="alert alert-danger">@validationMessage</div>
                        }
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Annullér</button>
                        <button type="submit" class="btn btn-warning">Nulstil</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public User SelectedUser { get; set; }
    [Parameter] public EventCallback<int> OnResetPassword { get; set; }


    private ResetPasswordModel model = new();
    private string? validationMessage;

    private async Task CloseModal()
    {
        model = new(); // Ryd felterne
        validationMessage = null;
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task ResetPassword()
    {
        if (SelectedUser is null) return;

        if (model.NewPassword != model.ConfirmPassword)
        {
            validationMessage = "Adgangskoderne matcher ikke.";
            return;
        }

        if (!await UserService.IsPasswordStrongAsync(model.NewPassword))
        {
            validationMessage = "Adgangskoden er ikke stærk nok. (min. 8 tegn)";
            return;
        }

        await UserService.ResetPasswordAsync(SelectedUser.Id, model.NewPassword);

        // Kald parent callback
        await OnResetPassword.InvokeAsync(SelectedUser.Id);

        await CloseModal();
    }

    public class ResetPasswordModel
    {
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
