@using ServiceContracts
@using TravelFusionLean.Models
@inject IUserService UserService

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm Model="@model" OnValidSubmit="ResetPassword">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="modal-header">
                        <h5 class="modal-title">Nulstil adgangskode</h5>
                        <button type="button" class="btn-close" @onclick="@(async () => await CloseModal())"></button>
                    </div>

                    <div class="modal-body">
                        <p>Nulstil adgangskode for: <strong>@SelectedUser?.Username</strong></p>

                        <InputText type="password"
                                   id="newPassword"
                                   class="@GetCssClass(isPasswordValid, model.NewPassword)"
                                   @bind-Value="model.NewPassword"
                                   oninput="@CheckPasswordStrength" />
                        @if (!isPasswordValid && passwordTouched)
                        {
                            <div class="text-danger mt-1">Adgangskoden er for kort. (min. 8 tegn)</div>
                        }

                        <InputText type="password"
                                   id="confirmPassword"
                                   class="@GetCssClass(passwordsMatch, model.ConfirmPassword)"
                                   @bind-Value="model.ConfirmPassword"
                                   oninput="@((ChangeEventArgs _) => StateHasChanged())" />
                        @if (!passwordsMatch && !string.IsNullOrEmpty(model.ConfirmPassword))
                        {
                            <div class="text-danger mt-1">Adgangskoderne matcher ikke.</div>
                        }
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="@(async () => await CloseModal())">Annullér</button>
                        <button type="submit" class="btn btn-warning" disabled="@( !isPasswordValid || !passwordsMatch )">Nulstil</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public User SelectedUser { get; set; }
    [Parameter] public EventCallback<int> OnResetPassword { get; set; }

    private ResetPasswordModel model = new();

    private bool passwordTouched = false;
    private bool isPasswordValid = true;
    private bool passwordsMatch => model.NewPassword == model.ConfirmPassword;

    private async Task CloseModal()
    {
        model = new(); // Ryd felterne
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task ResetPassword()
    {
        if (SelectedUser is null) return;
        if (!isPasswordValid || !passwordsMatch) return;

        await UserService.ResetPasswordAsync(SelectedUser.Id, model.NewPassword);
        await OnResetPassword.InvokeAsync(SelectedUser.Id);
        await CloseModal();
    }

    private async Task CheckPasswordStrength(ChangeEventArgs e)
    {
        passwordTouched = true;
        isPasswordValid = await UserService.IsPasswordStrongAsync(model.NewPassword);
        StateHasChanged();
    }

    private string GetCssClass(bool isValid, string fieldInput)
    {
        if (string.IsNullOrWhiteSpace(fieldInput))
            return "form-control";

        return isValid ? "form-control is-valid" : "form-control is-invalid";
    }

    public class ResetPasswordModel
    {
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}

