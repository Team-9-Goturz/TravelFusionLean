@page "/CreateUser"
@layout AdminLayout
@rendermode InteractiveServer

@using System.Security.Cryptography
@using System.Text
@using Microsoft.EntityFrameworkCore
@using ServiceContracts
@using TravelFusionLean.Data
@using TravelFusionLean.Components.Layout
@using TravelFusionLean.Models

@inject IUserService UserService
@inject IUserRoleService UserRoleService

@inject NavigationManager NavigationManager

<h3>CreateUser</h3>

@code {
    private User _user = new User();
    private List<UserRole> _userRoles = new List<UserRole>();
    private int selectedRoleId;

    private string _password = "";
    private bool passwordTouched = false;

    private string _passwordRepeat = "";
    private bool usernameIsTaken;
    private bool IsUsernameValid;

    private string Password
    {
        get => _password;
        set
        {
            _password = value;
            passwordTouched = true;
            StateHasChanged(); // Sikrer UI opdateres live
        }
    }
    private string PasswordRepeat
    {
        get => _passwordRepeat;
        set
        {
            _passwordRepeat = value;
            StateHasChanged();
        }
    }

    private bool IsPasswordValid ;
    private bool PasswordsMatch => Password == PasswordRepeat;
    private bool IsUsernameAvailable;


    protected override async Task OnInitializedAsync()
    {
        _userRoles = (await UserRoleService.GetAllAsync()).ToList();
        await base.OnInitializedAsync();
    }

    private bool canCreate => IsPasswordValid && PasswordsMatch && !usernameIsTaken;
    private async Task Create()
    {
        if (canCreate)
        {
            _user.UserRole = _userRoles.FirstOrDefault(role => role.Id == selectedRoleId);
            var user = await UserService.Create(_user, Password);
        }
    }

    private async Task CheckUsernameAvailability(ChangeEventArgs e)
    {
        string input = e.Value?.ToString() ?? "";
        _user.Username = input;

        if (!string.IsNullOrWhiteSpace(input))
        {
            usernameIsTaken = !await UserService.IsUsernameAvailableAsync(input);
            if (usernameIsTaken)
            {
                IsUsernameValid = false;
            }
            else
            {
                IsUsernameValid = true;
            }
        }
        else
        {
            usernameIsTaken = false;
        }

        StateHasChanged(); // Opdater UI
    }

    private async Task CheckPasswordStrength(ChangeEventArgs e)
    {
        string input = e.Value?.ToString() ?? "";
        if (!string.IsNullOrWhiteSpace(input))
        {
            IsPasswordValid = await UserService.IsPasswordStrongAsync(input);
        }
        StateHasChanged(); 
    }

    private string GetCssClass(bool Isvalid, string fieldInput )
    {
        if (string.IsNullOrWhiteSpace(fieldInput))
            return "form-control"; // Neutral grå

        return Isvalid ? "form-control is-valid" : "form-control is-invalid";
    }
}

<EditForm FormName="User" Model="@_user" OnValidSubmit="@Create">
    <h6>Brugernavn *</h6>
    <InputText @bind-Value="@_user.Username" class="@GetCssClass(IsUsernameValid,_user.Username)" oninput="@CheckUsernameAvailability"></InputText>
    @if (usernameIsTaken)
    {
        <div class="text-danger mt-1">Brugernavn er optaget, vælg et andet.</div>
    }
    <h6>Adgangskode *</h6>
    <InputText @bind-Value="Password" class="@GetCssClass(IsPasswordValid,Password)" oninput="@CheckPasswordStrength" />
    @if (!IsPasswordValid && passwordTouched==true)
    {
        <div class="text-danger mt-1">Adgangskode er for kort.</div>
    }
    <h6>Gentag adgangskode *</h6>
    <InputText @bind-Value="PasswordRepeat" class="@GetCssClass(PasswordsMatch,PasswordRepeat)" />
    @if (!PasswordsMatch)
    {
        <div class="text-danger mt-1">Adgangskoder er ikke ens.</div>
    }
    <h6>Email * </h6>
    <InputText @bind-Value="@_user.Email" class="form-control"></InputText>
    
    <label for="roleSelect">Vælg en rolle:</label>
    <select @bind="selectedRoleId">
        @foreach (UserRole role in _userRoles)
        {
            <option value="@role.Id">@role.Name</option>
        }
    </select>

    <button type="submit"  disabled="@(!canCreate)">Create </button>
</EditForm>




 