@using Shared.Models
@using Shared.Dtos

@inject ICurrencyConverter CurrencyConverter

<div class="mb-3">
    <label for="headline" class="form-label">Headline</label>
    <InputText id="headline" @bind-Value="TravelPackageHeadline" class="form-control" />
</div>

<div class="mb-3">
    <label for="description" class="form-label">Description</label>
    <InputText id="description" @bind-Value="TravelPackageDescription" class="form-control" />
</div>

<label for="NoOfTravellers" class="form-label">Number of travellers</label>
<InputNumber id="NoOfTravellers" @bind-Value="NoOfTravellers" class="form-control" />

<label for="markupPercentage" class="form-label">Markup (% added to base price)</label>
<InputNumber id="markupPercentage" @bind-Value="MarkupPercentage" class="form-control" />

<div class="mb-3">
    <label for="uploadImage" class="form-label">Upload image</label>
    <InputFile OnChange="HandleImageUpload" />
</div>

<div class="form-check mb-3">
    <InputCheckbox id="isRecommended" @bind-Value="IsRecommended" class="form-check-input" />
    <label for="isRecommended" class="form-check-label">Recommended</label>
</div>

<div class="mb-3">
    <label class="form-label">Total Price</label>
    <h4>@CalculatedPrice</h4>
</div>

@code {
    [Parameter]
    public Shared.Models.Flight OutboundFlight { get; set; }
    [Parameter]
    public Shared.Models.Flight InboundFlight { get; set; }
    [Parameter]
    public HotelStay SelectedHotelStay { get; set; }

    [Parameter]
    public EventCallback<CreateTravelPackageDTO> OnFormSubmit { get; set; }

    public string TravelPackageHeadline { get; set; }
    public string TravelPackageDescription { get; set; }
    public int NoOfTravellers { get; set; }
    public bool IsRecommended { get; set; }

    private int _markupPercentage = 10;
    public int MarkupPercentage
    {
        get => _markupPercentage;
        set
        {
            if (_markupPercentage != value)
            {
                _markupPercentage = value;
                CalculatePrice();
            }
        }
    }

    public Price CalculatedPrice { get; set; } = new Price(0, Price.ISOCurrency.DKK);
    private string uploadedFileName;

    protected override void OnParametersSet()
    {
        if (SelectedHotelStay?.NoOfTravellers != null)
        {
            NoOfTravellers = SelectedHotelStay.NoOfTravellers;
        }
        CalculatePrice();
    }

    private void CalculatePrice()
    {
        if (OutboundFlight == null || InboundFlight == null || SelectedHotelStay == null)
        {
            CalculatedPrice = new Price(0, Price.ISOCurrency.DKK);
            return;
        }

        Price outboundInDKK = CurrencyConverter.Convert(OutboundFlight.Price, Price.ISOCurrency.DKK);
        Price hotelInDKK = CurrencyConverter.Convert(SelectedHotelStay.Price, Price.ISOCurrency.DKK);
        Price inboundInDKK = CurrencyConverter.Convert(InboundFlight.Price, Price.ISOCurrency.DKK);

        decimal basePrice = outboundInDKK.Amount + hotelInDKK.Amount + inboundInDKK.Amount;
        CalculatedPrice.Amount = basePrice + (basePrice * (MarkupPercentage / 100m));
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/uploads");
            var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
            var relativeImagePath = $"/images/uploads/{uniqueFileName}";
            var filePath = Path.Combine(uploadsFolder, uniqueFileName);

            await using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await stream.CopyToAsync(fileStream);

            uploadedFileName = relativeImagePath;

            StateHasChanged();
        }
    }

    public CreateTravelPackageDTO GetTravelPackageDTO()
    {
        return new CreateTravelPackageDTO
            {
                Headline = TravelPackageHeadline,
                Description = TravelPackageDescription,
                Price = CalculatedPrice,
                HotelStay = SelectedHotelStay,
                OutboundFlight = OutboundFlight,
                InboundFlight = InboundFlight,
                NoOfTravellers = NoOfTravellers,
                ImagePath = uploadedFileName,
                IsRecommended = IsRecommended
            };
    }
}
