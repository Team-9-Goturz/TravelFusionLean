@page "/BookingList"

@using Microsoft.EntityFrameworkCore
@using ServiceImplementations
@using Shared.Dtos
@using Shared.Models
@using Data
@using ServiceImplementations;

@inject IBookingService bookingService
@inject NavigationManager NavManager

@layout AdminLayout
@rendermode InteractiveServer
@using TravelFusionLean.Components.Layout
@using TravelFusionLean.Components.Layout.Admin

<h3>BookingList</h3>

@code
{
    private List<Booking> _bookings = new List<Booking>();
    private int resultCount;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadBookings();
    }
    private async Task LoadBookings() 
    {
        var result = await bookingService.GetAllAsync();//hent alle bookinger fra databasen via BookingService
        _bookings = result.ToList();
        resultCount = _bookings.Count; //antallet af bookinger hentet fra databasen
    }
}
<table border="1" class="table">
    <thead>
        <tr>
            <th>Beskrivelse</th>
            <th>Antal Rejsende</th>
            <th>Pris</th>
            <th>Status</th>
            <th>Booket den</th>
            <th>Payment status</th>
            <th>Handling</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var booking in _bookings)
        {
            <tr>
                <td>
                    <strong>@booking.TravelPackage?.Headline</strong><br />
                    @booking.TravelPackage?.Description
                </td>
                <td>@booking.TravelPackage?.NoOfTravellers</td>
                <td>@booking.Price.ToString()</td>
                <td>@booking.Status</td>
                <td>@booking.BookingMadeAt.ToString("dd-MM-yyyy HH:mm")</td>
                <td>@(booking.Payment != null ? booking.Payment.Status : "Ingen betaling")</td>
                <td>
                    <button @onclick="@(() => NavManager.NavigateTo($"/booking-details/{booking.Id}"))">
                        Show more
                    </button>

                    @if (booking.Status == BookingStatus.Pending || booking.Status == BookingStatus.Paid)
                    {
                        <button @onclick="() => CancelBooking(booking.Id.Value)">Cancel</button> //Hotelophold eller fly er alligvel ikke tilgængeligt
                        <button @onclick="() => ConfirmBooking(booking.Id.Value)">Confirm</button> //hotel og flyselskab har bekræftet at produktet er tilgængeligt og bestilt
                    }
                    @if (booking.Status == BookingStatus.Confirmed){
                        <button @onclick="() => CancelBooking(booking.Id.Value)">Cancel</button> //hotel eller flyselskab har måske aflyst eller er måske gået konkurs
                    }
                    @if (booking.Status == BookingStatus.Cancelled && booking.Payment?.Status == PaymentStatus.Succeeded)
                    {
                        <button>Refund</button> //lav en refundering TODO
                    }

                    @if (booking.Status == BookingStatus.Cancelled)
                    {
                        <button @onclick="() => ArchiveBooking(booking.Id.Value)">Archive</button> //Ikke slet men arkiverer bestilling
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {

    private async Task ConfirmBooking(int id)
    {
        await bookingService.ConfirmByIdAsync(id);
    }
    private async Task CancelBooking(int id)
    {
        await bookingService.CancelByIdAsync(id);
    }
    private async Task ArchiveBooking(int id)
    {
        await bookingService.ArchiveAsync(id);
    }
}
