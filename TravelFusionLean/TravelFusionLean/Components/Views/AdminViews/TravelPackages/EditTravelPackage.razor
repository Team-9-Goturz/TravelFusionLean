@page "/EditTravelPackage/{TravelPackageId:int}"
@inject ITravelPackageCoordinator TravelPackageCoordinator
@inject ITravelPackageService TravelPackageService
@inject HttpClient Http
@inject ICurrencyConverter currencyConverter
@inject NavigationManager navigationManager
@inject TravelPackageState travelPackageState

@using Shared.Models
@using Shared.Dtos
@using TravelFusionLean.Components.Layout.Admin
@using TravelFusionLean.Components.SmallComponents
@using ServiceContracts
@layout AdminLayout
@rendermode InteractiveServer

<h2 class="text-primary-blue-center">Edit Travel Package</h2>

<!-- Formular og valgte oplysninger -->
<div class="container mt-4">
    <div class="row">
        <!-- LEFT: Form -->
        <div class="col-md-8">

            <TravelPackageForm 
            ExistingPackage = "package"
            @ref="travelPackageForm" />
        </div>

        <!-- Flights and Hotel stacked -->
        <div class="col-md-4 d-flex flex-column gap-3">
            @if (package.OutboundFlight != null)
            {
                <TravelFusionLean.Components.SmallComponents.Flight.FlightCard Flight="travelPackageState.OutboundFlight" OutBound="true"></TravelFusionLean.Components.SmallComponents.Flight.FlightCard>
            }
            else
            {
                <div class="alert alert-warning h-100 d-flex align-items-center justify-content-center">
                    No Outboundflight selected. Please go back and choose one.
                </div>
            }

            @if (package.InboundFlight != null)
            {
                <TravelFusionLean.Components.SmallComponents.Flight.FlightCard Flight=" travelPackageState.InboundFlight" OutBound="false"></TravelFusionLean.Components.SmallComponents.Flight.FlightCard>
            }
            else
            {
                <div class="alert alert-warning h-100 d-flex align-items-center justify-content-center">
                    No inboundflight selected. Please go back and choose one.
                </div>
            }

            @if (package.HotelStay != null)
            {
                <TravelFusionLean.Components.SmallComponents.HotelCard HotelStay="travelPackageState.SelectedHotelStay"></TravelFusionLean.Components.SmallComponents.HotelCard>
            }
            else
            {
                <div class="alert alert-warning h-100 d-flex align-items-center justify-content-center">
                    No hotel selected.
                </div>
            }
        </div>
    </div>
</div>

<div class="mt-4 d-flex justify-content-end">
    <button class="btn btn-primary" @onclick="UpdateTravelPackageAsync">
        <i class="fa fa-plus"></i> Update Travel Package
    </button>
</div>

@code 
{
    [Parameter]
    public int TravelPackageId { get; set; }
    private TravelPackage? package;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        package = await TravelPackageService.GetByIdAsync(TravelPackageId);

        if (travelPackageState.IsEditing != true) //find udad om en redigering allerede er igang
        {
            navigationManager.LocationChanged += OnLocationChanged;

            travelPackageState.InboundFlight = package.InboundFlight;
            travelPackageState.OutboundFlight = package.OutboundFlight;
            travelPackageState.SelectedHotelStay = package.HotelStay;
            travelPackageState.IsEditing = true;
            travelPackageState.TravelpackageID = package.Id;
        }
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var url = e.Location.ToLower();

        if (!url.Contains("/travel-package-hotels") && !url.Contains("/travel-package-flights") && !url.Contains("/edittravelpackage"))
        {
            ResetTravelPackageState();
        }
    }

    private void ResetTravelPackageState()
    {
        // travelPackageState.InboundFlight = null;
        // travelPackageState.OutboundFlight = null;
        // travelPackageState.SelectedHotelStay = null;
        // travelPackageState.IsEditing = false;
        // travelPackageState.TravelpackageID = 0;
    }
    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }

    private TravelPackageForm travelPackageForm;

    private async Task UpdateTravelPackageAsync()
    {
        if (travelPackageForm == null)
            return;

        CreateTravelPackageDTO dto = travelPackageForm.GetTravelPackageDTO();

        // Antag Update-metode i koordinator som opdaterer eksisterende
        TravelPackage UpdatedTravelPackage = await TravelPackageCoordinator.UpdateTravelpackageAsync(package.Id, dto);

        ResetTravelPackageState();

        navigationManager.NavigateTo($"/travelpackages/details/{package.Id}");
    }
}
