@page "/publish-travel-package"
@inject ITravelPackageCoordinator TravelPackageCoordinator
@inject TravelPackageState travelPackageState
@inject HttpClient Http
@inject ICurrencyConverter currencyConverter

@using Shared.Models
@using Shared.Dtos
@using TravelFusionLean.Components.Layout.Admin
@using ServiceContracts
@layout AdminLayout
@rendermode InteractiveServer

<!-- CSS og JS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="css/CustomColors.css" rel="stylesheet" />

<!-- Titel -->
<div class="container mt-4">
    <h2 class="text-primary-blue-center">Create Travel Package</h2>
</div>

@code
{
    // Styrer UI-knapper
    public bool ShowBusyButton { get; set; }
    public bool ShowSaveButton { get; set; } = true;
    List<string> formErrorMessages = new List<string>();

    private Price CalulatedPrice = new Price(0, Price.ISOCurrency.DKK);
    private string TravelPackageHeadline;
    private string TravelPackageDescription;
    private int NoOfTravellers;
    private int _markupPercentage = 10;
    private int markupPercentage
    {
        get => _markupPercentage;
        set
        {
            if (_markupPercentage != value)
            {
                _markupPercentage = value;
                CalculatePrice();
            }
        }
    }
    private string uploadedFileName;
}

<!-- Formular og valgte oplysninger -->
<div class="container mt-4">
    <div class="row">
        <!-- LEFT: Form -->
        <div class="col-md-8">
            <div class="mb-3">
                <label for="headline" class="form-label">HeadLine</label>
                <InputText id="headline" @bind-Value="TravelPackageHeadline" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputText id="description" @bind-Value="TravelPackageDescription" class="form-control" />
            </div>

            <label for="NoOfTravellers" class="form-label">Number of travellers</label>
            <InputNumber id="NoOfTravellers" @bind-Value="NoOfTravellers" class="form-control" />

            <label for="markupPercentage" class="form-label">Markup (% added to base price)</label>
            <InputNumber id="markupPercentage" @bind-Value="markupPercentage" class="form-control" />

            <div class="mb-3">
                <label for="uploadImage" class="form-label">Upload image</label>
                <InputFile OnChange="HandleImageUpload" />
            </div>


            <div class="mb-3">
                <label class="form-label">Total Price</label>
                <h4>@CalulatedPrice</h4>
            </div>
        </div>

        <!-- Flights and Hotel stacked -->
        <div class="col-md-4 d-flex flex-column gap-3">
            @if (travelPackageState.OutboundFlight != null)
            {
                <div class="card shadow-sm h-100">
                    <div class="card-header fw-bold">Selected outboundFlight</div>
                    <div class="card-body">
                        <p>
                            <strong>Flight to</strong><br />
                            Airline: @travelPackageState.OutboundFlight.Airline<br />
                            From: @travelPackageState.OutboundFlight.DepartureFromAirport?.City<br />
                            To: @travelPackageState.OutboundFlight.ArrivalAtAirport?.City<br />
                            Departure: @travelPackageState.OutboundFlight.DepartureTime.ToString("g")<br />
                            Arrival: @travelPackageState.OutboundFlight.ArrivalTime.ToString("g")<br />
                            Class: @travelPackageState.OutboundFlight.ClassType<br />
                            Seats: @travelPackageState.OutboundFlight.SeatsAvailable<br />
                            Price: @travelPackageState.OutboundFlight.Price
                        </p>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning h-100 d-flex align-items-center justify-content-center">
                    No Outboundflight selected. Please go back and choose one.
                </div>
            }

            @if (travelPackageState.InboundFlight != null)
            {
                <div class="card shadow-sm h-100">
                    <div class="card-header fw-bold">Selected inboundFlight</div>
                    <div class="card-body">
                        <p>
                            <strong>Flight back</strong><br />
                            Airline: @travelPackageState.InboundFlight.Airline<br />
                            From: @travelPackageState.InboundFlight.DepartureFromAirport?.City<br />
                            To: @travelPackageState.InboundFlight.ArrivalAtAirport?.City<br />
                            Departure: @travelPackageState.InboundFlight.DepartureTime.ToString("g")<br />
                            Arrival: @travelPackageState.InboundFlight.ArrivalTime.ToString("g")<br />
                            Class: @travelPackageState.InboundFlight.ClassType<br />
                            Seats: @travelPackageState.InboundFlight.SeatsAvailable<br />
                            Price: @travelPackageState.InboundFlight.Price
                        </p>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning h-100 d-flex align-items-center justify-content-center">
                    No inboundflight selected. Please go back and choose one.
                </div>
            }

            @if (travelPackageState.SelectedHotelStay != null)
            {
                <div class="card shadow-sm h-100">
                    <div class="card-header fw-bold">Selected Hotel Stay</div>
                    <div class="card-body">
                        <p>
                            <strong>Hotel Information</strong><br />
                            Hotel: @travelPackageState.SelectedHotelStay.Hotel?.Name<br />
                            Description: @travelPackageState.SelectedHotelStay.Hotel?.Description<br />
                            Address: @travelPackageState.SelectedHotelStay.Hotel?.Address<br />
                            City: @travelPackageState.SelectedHotelStay.Hotel?.City<br />
                            Country: @travelPackageState.SelectedHotelStay.Hotel?.Country<br />
                            Rating: @travelPackageState.SelectedHotelStay.Hotel?.Rating<br />
                            <br />
                            <strong>Stay Details</strong><br />
                            Check-in: @travelPackageState.SelectedHotelStay.CheckInDate.ToString("d")<br />
                            Check-out: @travelPackageState.SelectedHotelStay.CheckOutDate.ToString("d")<br />
                            Days: @travelPackageState.SelectedHotelStay.DaysOfStay<br />
                            Travellers: @travelPackageState.SelectedHotelStay.NoOfTravellers<br />
                            Price: @travelPackageState.SelectedHotelStay.Price
                        </p>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning h-100 d-flex align-items-center justify-content-center">
                    No hotel selected.
                </div>
            }
        </div>
    </div>
</div>


<!-- Knap til at udgive pakken -->
<div class="container mt-4">
    <div class="d-flex justify-content-end">
        @if (ShowSaveButton)
        {
            <button class="btn btn-primary" @onclick="CreateTravelPackageAsync">
                <i class="fa fa-plus"></i> Publish travel package
            </button>

        }
    </div>
</div>


@code
{
    private bool hasRendered = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (travelPackageState.SelectedHotelStay.NoOfTravellers != null)
            {
                NoOfTravellers = travelPackageState.SelectedHotelStay.NoOfTravellers;
            }
            hasRendered = true;
            CalculatePrice(); // Kald beregning første gang komponenten vises
            await InvokeAsync(StateHasChanged); // Sikrer UI opdateres
        }
    }

    private void CalculatePrice() // flyt mig ud i service
    {
        Price outboundInDKK = currencyConverter.Convert(travelPackageState.OutboundFlight.Price, Price.ISOCurrency.DKK);
        Price HotelStayInDKK = currencyConverter.Convert(travelPackageState.SelectedHotelStay.Price, Price.ISOCurrency.DKK);
        Price inboundInDKK = currencyConverter.Convert(travelPackageState.InboundFlight.Price, Price.ISOCurrency.DKK);

        Decimal price = outboundInDKK.Amount + HotelStayInDKK.Amount + inboundInDKK.Amount;
        CalulatedPrice.Amount = price + (price * (markupPercentage / 100m));
    }
    private async void CreateTravelPackageAsync()
    {
        CreateTravelPackageDTO packageDTO = new CreateTravelPackageDTO();
        packageDTO.Headline = TravelPackageHeadline;
        packageDTO.Description = TravelPackageDescription;
        packageDTO.Price = CalulatedPrice;
        packageDTO.HotelStay = travelPackageState.SelectedHotelStay;
        packageDTO.OutboundFlight = travelPackageState.OutboundFlight;
        packageDTO.InboundFlight = travelPackageState.InboundFlight;
        packageDTO.NoOfTravellers = NoOfTravellers;
        packageDTO.ImagePath = uploadedFileName;


        TravelPackage travelPackage = await TravelPackageCoordinator.CreateTravelpackageAsync(packageDTO);
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/uploads");
            var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
            var relativeImagePath = $"/images/uploads/{uniqueFileName}";
            var filePath = Path.Combine(uploadsFolder, uniqueFileName);

            await using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB max
            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await stream.CopyToAsync(fileStream);

            uploadedFileName = relativeImagePath;

            StateHasChanged();
        }
    }
}

}
          
   
