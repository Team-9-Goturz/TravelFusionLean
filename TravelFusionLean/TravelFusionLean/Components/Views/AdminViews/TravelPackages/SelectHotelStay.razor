@page "/travel-package-hotels"
@layout TravelFusionLean.Components.Layout.Admin.AdminLayout
@inject NavigationManager NavigationManager
@inject IHotelApiService HotelApiService
@inject TravelPackageState travelPackageState
@inject ICurrencyConverter currencyConverter
@rendermode InteractiveServer
@using Shared.Models
@using Shared.DTOs
@using TravelFusionLean.Components.SmallComponents

<link href="css/CustomColors.css" rel="stylesheet" />

<div class="container mt-4">
    <h2 class="text-primary-blue text-center">Choose Hotel</h2>

    <TravelSummary travelPackageState="@travelPackageState" />

    <!-- Search Bar -->
    <div class="card p-3 mb-3">
        <div class="row">
            <div class="col-md-3">
                <label>Country:</label>
                <input type="text" class="form-control" @bind="searchForCountry" placeholder="Enter country of hotel"/>
            </div>
            <div class="col-md-3">
                <label>City:</label>
                <input type="text" class="form-control" @bind="searchForCity" placeholder="Enter city of hotel"/>
            </div>
            <div class="col-md-3">
                <label>checkin from:</label>
                <input type="date" class="form-control" @bind="searchFromDate" />
            </div>
            <div class="col-md-3">
                <label>(latest) Check out:</label>
                <input type="date" class="form-control" @bind="searchToDate" />
            </div>
            <div class="col-md-3">
                <label>Travellers:</label>
                <input type="number" class="form-control" @bind="numberOfTravellers" placeholder="Enter number of travelers" />
            </div>
            <div class="col-md-3">
                <label>Price From:</label>
                <input type="number" class="form-control" @bind="searchPriceFrom" placeholder="0" />
            </div>
            <div class="col-md-3">
                <label>Price To:</label>
                <input type="number" class="form-control" @bind="searchPriceTo" placeholder="0" />
            </div>
            <div class="col-md-1 d-flex align-items-end">
                <button class="btn btn-primary w-100" @onclick="FilterHotels">🔍</button>
            </div>
        </div>
    </div>

    <!-- Tabs for sorting -->
    <div class="row">
        <!-- LEFT SIDE: Tabs + Hotels -->
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mt-3 mb-3">
                <!-- Tabs -->
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <button class="nav-link @(selectedTab == "cheapest" ? "active" : "")" @onclick="@(() => SetTab("cheapest"))">Cheapest</button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link @(selectedTab == "best" ? "active" : "")" @onclick="@(() => SetTab("best"))">Best</button>
                    </li>
                </ul>

                <!-- Currency Dropdown -->
                <div class="form-group mb-0">
                    <label for="currencySelector" class="form-label me-2">Currency:</label>
                    <select id="currencySelector" class="form-select" style="width: auto; display: inline-block;" @bind="SelectedCurrency">
                        @foreach (Price.ISOCurrency currency in Enum.GetValues(typeof(Price.ISOCurrency)))
                        {
                            <option value="@currency">@currency</option>
                        }
                    </select>
                </div>
            </div>

            <!-- Hotel list -->
            <div class="tab-content">
                @if (hotelStays == null)
                {
                    <p><em>Loading hotels...</em></p>
                }
                else if (!hotelStays.Any())
                {
                    <p>No hotels found.</p>
                }
                else
                {
                    foreach (HotelStay stay in filteredHotelStays)
                    {
                        <div class="d-flex justify-content-between border p-2 mb-2">
                            <div>
                                <strong>@stay.Hotel?.Name</strong><br />
                                @stay.Hotel?.City @stay.Hotel?.Country?.Name<br />
                                @stay.Hotel?.Description<br />
                                @stay.CheckInDate.ToShortDateString() - @stay.CheckOutDate.ToShortDateString()<br />
                                @stay.Price.ToString()
                            </div>
                            <button class="btn btn-primary" @onclick="() => SelectHotel(stay)">Select</button>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<HotelStay>? allHotels;
    private List<HotelStay>? filteredHotelStays;
    private HotelStay? selectedHotelstay;

    private string? selectedTab = "cheapest";
    private string? searchForCountry;
    private string? searchForCity;
    private DateTime? searchFromDate;
    private DateTime? searchToDate;
    private decimal? searchPriceFrom = 0;
    private decimal? searchPriceTo;
    private int? numberOfTravellers;
    private List<HotelStay>? hotelStays;
    private Price.ISOCurrency _selectedCurrency = Price.ISOCurrency.DKK;
    public Price.ISOCurrency SelectedCurrency
    {
        get => _selectedCurrency;
        set
        {
            if (_selectedCurrency != value)
            {
                _selectedCurrency = value;
                ConvertPrice();
            }
        }
    }

    private bool isFirstRender = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isFirstRender)
        {
            isFirstRender = false;

            hotelStays = (await HotelApiService.GetAllHotelStaysAsync()).ToList();
            filteredHotelStays = hotelStays;

            await ConvertPrice();

            StateHasChanged(); // Trigger rerender når data er klar
        }
    }

    //Filter hotels by price and location
    //Lige nu er der kun search location, men ikke en location variabel. 
    private void FilterHotels()
    {
        filteredHotelStays = hotelStays
         .Where(h =>
             // Land
             (string.IsNullOrWhiteSpace(searchForCountry) ||
              h.Hotel.Country.Name.Contains(searchForCountry, StringComparison.OrdinalIgnoreCase)) &&

             // By
             (string.IsNullOrWhiteSpace(searchForCity) ||
              h.Hotel.City.Contains(searchForCity, StringComparison.OrdinalIgnoreCase)) &&

             // Dato fra
             (!searchFromDate.HasValue ||
              h.CheckInDate.Date >= searchFromDate.Value.Date) &&

             // Dato til
             (!searchToDate.HasValue ||
              h.CheckOutDate.Date <= searchToDate.Value.Date) &&

             // Pris fra
             (!searchPriceFrom.HasValue ||
              h.Price.Amount >= searchPriceFrom.Value) &&

             // Pris til
             (!searchPriceTo.HasValue ||
              h.Price.Amount <= searchPriceTo.Value) &&

             // Antal rejsende
             (!numberOfTravellers.HasValue ||
              h.NoOfTravellers >= numberOfTravellers.Value))
         .ToList();
    }

    private void SetTab(string tab)
    {
        selectedTab = tab;
        StateHasChanged();
    }

    private void SelectHotel(HotelStay? hotelstay)
    {
        if (hotelstay != null)
        {
            selectedHotelstay = hotelstay;
            travelPackageState.SelectedHotelStay = hotelstay;
        }
    }

    private IEnumerable<Hotel> SortedHotels =>
        selectedTab switch
        {
            // "cheapest" => filteredHotels?.OrderBy(h => h.Price) ?? Enumerable.Empty<Hotel>(),
            // "best" => filteredHotels?.OrderByDescending(h => h.Price) ?? Enumerable.Empty<Hotel>(),
            // _ => filteredHotelStays ?? Enumerable.Empty<Hotel>()
        };

    private async Task ConvertPrice()
    {
        foreach (HotelStay hotelStay in filteredHotelStays)
        {
            hotelStay.Price = currencyConverter.Convert(hotelStay.Price, SelectedCurrency);
            StateHasChanged();
        }
    }
}
