@page "/travel-package-hotels"
@layout TravelFusionLean.Components.Layout.Admin.AdminLayout
@inject NavigationManager NavigationManager
@inject IHotelApiService HotelApiService
@inject TravelPackageState travelPackageState
@inject ICurrencyConverter currencyConverter
@rendermode InteractiveServer
@using Shared.Models
@using Shared.DTOs
@using TravelFusionLean.Components.SmallComponents

<link href="css/CustomColors.css" rel="stylesheet" />

<div class="container mt-4">
    <h2 class="text-primary-blue text-center">Choose Hotel</h2>

    <TravelSummary travelPackageState="@travelPackageState" />

    <!-- Search Bar -->
    <div class="card p-3 mb-3">
        <div class="row">
            <!-- Existing search fields -->
            <div class="col-md-3">
                <label>Country:</label>
                <input type="text" class="form-control" @bind="searchForCountry" placeholder="Enter country of hotel" />
            </div>
            <div class="col-md-3">
                <label>City:</label>
                <input type="text" class="form-control" @bind="searchForCity" placeholder="Enter city of hotel" />
            </div>
            <div class="col-md-3">
                <label>checkin from:</label>
                <input type="date" class="form-control" @bind="searchFromDate" />
            </div>
            <div class="col-md-3">
                <label>(latest) Check out:</label>
                <input type="date" class="form-control" @bind="searchToDate" />
            </div>
            <div class="col-md-3">
                <label>Travellers:</label>
                <input type="number" class="form-control" @bind="numberOfTravellers" placeholder="Enter number of travelers" />
            </div>
            <div class="col-md-3">
                <label>Price From:</label>
                <input type="number" class="form-control" @bind="searchPriceFrom" placeholder="0" />
            </div>
            <div class="col-md-3">
                <label>Price To:</label>
                <input type="number" class="form-control" @bind="searchPriceTo" placeholder="0" />
            </div>
            <div class="col-md-1 d-flex align-items-end">
                <button class="btn btn-primary w-100" @onclick="FilterHotels">🔍</button>
            </div>
        </div>
    </div>

    <!-- Tabs for sorting -->
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mt-3 mb-3">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <button class="nav-link @(selectedTab == "cheapest" ? "active" : "")" @onclick="@(() => SetTab("cheapest"))">Cheapest</button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link @(selectedTab == "best" ? "active" : "")" @onclick="@(() => SetTab("best"))">Best</button>
                    </li>
                </ul>
                <div class="d-flex align-items-center gap-3">
                    <div>
                        <label for="pageSizeSelector" class="form-label me-2">Results per page:</label>
                        <select id="pageSizeSelector" class="form-select" style="width: auto; display: inline-block;" @onchange="OnPageSizeChange">
                            <option value="10" selected>10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                        </select>
                    </div>
                    <div>
                        <label for="currencySelector" class="form-label me-2">Currency:</label>
                        <select id="currencySelector" class="form-select" style="width: auto; display: inline-block;" @bind="SelectedCurrency">
                            @foreach (Price.ISOCurrency currency in Enum.GetValues(typeof(Price.ISOCurrency)))
                            {
                                <option value="@currency">@currency</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="tab-content">
                @if (filteredHotelStays == null)
                {
                    <p><em>Loading hotels...</em></p>
                }
                else if (!filteredHotelStays.Any())
                {
                    <p>No hotels found.</p>
                }
                else
                {
                    @foreach (HotelStay stay in PagedHotelStays)
                    {
                        <div class="d-flex justify-content-between border p-2 mb-2">
                            <div>
                                <strong>@stay.Hotel?.Name</strong><br />
                                @stay.Hotel?.City @stay.Hotel?.Country?.Name<br />
                                @stay.Hotel?.Description<br />
                                @stay.CheckInDate.ToShortDateString() - @stay.CheckOutDate.ToShortDateString()<br />
                                @stay.Price.ToString()
                            </div>
                            <button class="btn btn-primary" @onclick="() => SelectHotel(stay)">Select</button>
                        </div>
                    }

                    <div class="d-flex justify-content-center mt-3">
                        <nav>
                            <ul class="pagination">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="PrevPage">Previous</button>
                                </li>
                                @for (int i = 1; i <= TotalPages; i++)
                                {
                                    var pageIndex = i;
                                    <li class="page-item @(pageIndex == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="@(() => GoToPage(pageIndex))">@pageIndex</button>
                                    </li>
                                }
                                <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="NextPage">Next</button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<HotelStay>? allHotels;
    private List<HotelStay>? filteredHotelStays;
    private HotelStay? selectedHotelstay;

    private string? selectedTab = "cheapest";
    private string? searchForCountry;
    private string? searchForCity;
    private DateTime? searchFromDate;
    private DateTime? searchToDate;
    private decimal? searchPriceFrom = 0;
    private decimal? searchPriceTo;
    private int? numberOfTravellers;
    private Price.ISOCurrency _selectedCurrency = Price.ISOCurrency.DKK;
    public Price.ISOCurrency SelectedCurrency
    {
        get => _selectedCurrency;
        set
        {
            if (_selectedCurrency != value)
            {
                _selectedCurrency = value;
                ConvertPrice();
            }
        }
    }

    private int currentPage = 1;
    private int pageSize = 10;
    private int TotalPages => (int)Math.Ceiling((double)(filteredHotelStays?.Count ?? 0) / pageSize);

    private IEnumerable<HotelStay> PagedHotelStays =>
        filteredHotelStays?.Skip((currentPage - 1) * pageSize).Take(pageSize) ?? Enumerable.Empty<HotelStay>();

    private bool isFirstRender = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isFirstRender)
        {
            isFirstRender = false;
            allHotels = (await HotelApiService.GetAllHotelStaysAsync()).ToList();
            filteredHotelStays = allHotels;
            await ConvertPrice();
            StateHasChanged();
        }
    }

    private void FilterHotels()
    {
        currentPage = 1;
        filteredHotelStays = allHotels
         .Where(h =>
             (string.IsNullOrWhiteSpace(searchForCountry) || h.Hotel.Country.Name.Contains(searchForCountry, StringComparison.OrdinalIgnoreCase)) &&
             (string.IsNullOrWhiteSpace(searchForCity) || h.Hotel.City.Contains(searchForCity, StringComparison.OrdinalIgnoreCase)) &&
             (!searchFromDate.HasValue || h.CheckInDate.Date >= searchFromDate.Value.Date) &&
             (!searchToDate.HasValue || h.CheckOutDate.Date <= searchToDate.Value.Date) &&
             (!searchPriceFrom.HasValue || h.Price.Amount >= searchPriceFrom.Value) &&
             (!searchPriceTo.HasValue || h.Price.Amount <= searchPriceTo.Value) &&
             (!numberOfTravellers.HasValue || h.NoOfTravellers >= numberOfTravellers.Value))
         .ToList();
    }

    private void SetTab(string tab)
    {
        selectedTab = tab;
        StateHasChanged();
    }

    private void SelectHotel(HotelStay? hotelstay)
    {
        if (hotelstay != null)
        {
            selectedHotelstay = hotelstay;
            travelPackageState.SelectedHotelStay = hotelstay;
        }
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void NextPage() => GoToPage(currentPage + 1);
    private void PrevPage() => GoToPage(currentPage - 1);

    private void OnPageSizeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out int newSize) && newSize >= 10)
        {
            pageSize = newSize;
            currentPage = 1;
            StateHasChanged();
        }
    }

    private async Task ConvertPrice()
    {
        foreach (HotelStay hotelStay in filteredHotelStays)
        {
            hotelStay.Price = currencyConverter.Convert(hotelStay.Price, SelectedCurrency);
        }
    }
}
