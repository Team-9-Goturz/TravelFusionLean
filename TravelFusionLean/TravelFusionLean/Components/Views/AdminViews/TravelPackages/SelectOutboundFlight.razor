@page "/travel-package-flights/Outbound"
@layout TravelFusionLean.Components.Layout.Admin.AdminLayout
@inject IFlightApiService FlightApiService
@inject NavigationManager NavigationManager
@inject TravelPackageState travelPackageState
@rendermode InteractiveServer

@using Shared.Models
@using TravelFusionLean.Components.SmallComponents.Flight
@using TravelFusionLean.Components.SmallComponents
@using Shared.DTOs

<link href="css/CustomColors.css" rel="stylesheet" />

<div class="container mt-4">
    <h2 class="text-primary-blue text-center">Choose outbound Flight</h2>

     <TravelSummary travelPackageState="@travelPackageState" />
    <br />

    <FlightSearchForm SearchModel="@SearchModel" OnSearch="FilterFlights" />
    <FlightSelector Flights="filteredFlights" OnFlightSelected="HandleOutboundSelected" />
</div>

@code {
    private List<Flight> allFlights = new();
    private List<Flight> filteredFlights = new();
    private FligthSearchDTO SearchModel = new();

    protected override async Task OnInitializedAsync()
    {
        allFlights = (await FlightApiService.GetAllFlightsAsync()).ToList();
        filteredFlights = allFlights; // Vis alt fra start
    }

    private void FilterFlights()
    {
        filteredFlights = allFlights.Where(f =>
            (string.IsNullOrWhiteSpace(SearchModel.SearchFrom) || f.DepartureFromAirport?.City?.Contains(SearchModel.SearchFrom, StringComparison.OrdinalIgnoreCase) == true) &&
            (string.IsNullOrWhiteSpace(SearchModel.SearchTo) || f.ArrivalAtAirport?.City?.Contains(SearchModel.SearchTo, StringComparison.OrdinalIgnoreCase) == true) &&
            (!SearchModel.SearchDate.HasValue || f.DepartureTime.Date == SearchModel.SearchDate.Value.Date)
        ).ToList();
    }
    private void HandleOutboundSelected(Flight flight)
    {
        travelPackageState.OutboundFlight = flight;
    }
}