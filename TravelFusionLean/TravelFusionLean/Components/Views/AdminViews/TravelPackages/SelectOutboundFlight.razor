@page "/travel-package-flights"
@layout TravelFusionLean.Components.Layout.Admin.AdminLayout
@inject IFlightApiService FlightApiService
@inject NavigationManager NavigationManager
@inject TravelPackageState travelPackageState
@rendermode InteractiveServer

@using Shared.Models

<link href="css/CustomColors.css" rel="stylesheet" />

<div class="container mt-4">
    <h2 class="text-center">Choose Flight</h2>

    <!-- Search Bar -->
    <div class="card p-3 mb-3">
        <div class="row g-3">
            <div class="col-md-3">
                <label>Departure:</label>
                <input type="text" class="form-control" @bind="searchFrom" placeholder="Enter departure city" />
            </div>
            <div class="col-md-3">
                <label>Destination:</label>
                <input type="text" class="form-control" @bind="searchTo" placeholder="Enter destination city" />
            </div>
            <div class="col-md-3">
                <label>When:</label>
                <input type="date" class="form-control" @bind="searchDate" />
            </div>
            <div class="col-md-2">
                <label>Travellers:</label>
                <input type="number" class="form-control" placeholder="Enter number" disabled />
            </div>
            <div class="col-md-1 d-flex align-items-end">
                <button class="btn btn-primary w-100" @onclick="FilterFlights">
                    üîç
                </button>
            </div>
        </div>
    </div>

    <!-- Tabs for sorting -->
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <button class="nav-link @(selectedTab == "fastest" ? "active" : "")" @onclick="@(() => SetTab("fastest"))">Fastest</button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(selectedTab == "cheapest" ? "active" : "")" @onclick="@(() => SetTab("cheapest"))">Cheapest</button>
        </li>
        <li class="nav-item">
            <button class="nav-link @(selectedTab == "best" ? "active" : "")" @onclick="@(() => SetTab("best"))">Best</button>
        </li>
    </ul>

    <div class="tab-content p-3">
        @if (filteredFlights == null)
        {
            <p><em>Loading flights...</em></p>
        }
        else if (!filteredFlights.Any())
        {
            <p>No flights found.</p>
        }
        else
        {
            foreach (var flight in sortedFlights)
            {
                var duration = flight.ArrivalTime - flight.DepartureTime;

                <div class="d-flex justify-content-between border p-2 mb-2">
                    <div>
                        <strong>@flight.Airline</strong>
                        @flight.DepartureTime.ToString("HH:mm") ‚Üí
                        @flight.ArrivalTime.ToString("HH:mm")
                        -
                        @flight.Price
                        <br />
                        Duration: @($"{duration.Hours}h {duration.Minutes}m")<br />
                        Class: @(flight.ClassType ?? "Economy")<br />
                        Route: @flight.DepartureFromAirport?.City ‚Üí @flight.ArrivalAtAirport?.City
                    </div>
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SelectFlight(flight)">Select</button>
                </div>
            }
        }
    </div>

    <!-- Selected Flight Summary -->
    @if (selectedFlight != null)
    {
        var dur = selectedFlight.ArrivalTime - selectedFlight.DepartureTime;

        <div class="card mt-3 p-3">
            <h5>Selected Flight</h5>
            <p>
                <strong>@selectedFlight.Airline</strong><br />
                FROM: @selectedFlight.DepartureFromAirport?.City<br />
                TO: @selectedFlight.ArrivalAtAirport?.City<br />
                Departure: @selectedFlight.DepartureTime.ToString("g")<br />
                Arrival: @selectedFlight.ArrivalTime.ToString("g")<br />
                Duration: @($"{dur.Hours}h {dur.Minutes}m")<br />
                Class: @(selectedFlight.ClassType ?? "Economy")<br />
                Price: @selectedFlight.Price
            </p>
            <button class="btn btn-primary" @onclick="ChooseFlight">Continue to Hotels</button>
        </div>
    }
</div>

@code {
    private List<Flight>? allFlights;
    private List<Flight>? filteredFlights;
    private Flight? selectedFlight;

    private string selectedTab = "fastest";
    private string? searchFrom;
    private string? searchTo;
    private DateTime? searchDate;

    protected override async Task OnInitializedAsync()
    {
        allFlights = (await FlightApiService.GetAllFlightsAsync()).ToList();
        filteredFlights = allFlights;
    }

    private void FilterFlights()
    {
        filteredFlights = allFlights?.Where(f =>
            (string.IsNullOrWhiteSpace(searchFrom) || f.DepartureFromAirport?.City.Contains(searchFrom, StringComparison.OrdinalIgnoreCase) == true) &&
            (string.IsNullOrWhiteSpace(searchTo) || f.ArrivalAtAirport?.City.Contains(searchTo, StringComparison.OrdinalIgnoreCase) == true) &&
            (!searchDate.HasValue || f.DepartureTime.Date == searchDate.Value.Date)
        ).ToList();
    }

    private void SetTab(string tab)
    {
        selectedTab = tab;
        StateHasChanged();
    }

    private void SelectFlight(Flight flight)
    {
        selectedFlight = flight;
        travelPackageState.OutboundFlight = flight;
    }

    private void ChooseFlight()
    {
        NavigationManager.NavigateTo("/travel-package-hotels");
    }

    private IEnumerable<Flight> sortedFlights =>
        selectedTab switch
        {
            "fastest" => filteredFlights?.OrderBy(f => (f.ArrivalTime - f.DepartureTime).TotalMinutes) ?? Enumerable.Empty<Flight>(),
            "cheapest" => filteredFlights?.OrderBy(f => f.Price) ?? Enumerable.Empty<Flight>(),
            "best" => filteredFlights?.OrderBy(f =>
                (f.Price.Amount * 0.6m) + ((decimal)(f.ArrivalTime - f.DepartureTime).TotalMinutes * 0.4m)) ?? Enumerable.Empty<Flight>(),
            _ => filteredFlights ?? Enumerable.Empty<Flight>()
        };
}
