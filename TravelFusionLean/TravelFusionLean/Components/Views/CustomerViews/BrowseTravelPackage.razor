@page "/Travelpackage-Browse"
@page "/Travelpackage-Browse/{Destination?}"

@using Shared.Dtos
@using Shared.Models
@using Data
@using ServiceImplementations
@using TravelFusionLean.Components.Layout.Customer
@using TravelFusionLean.Components.SmallComponents

@layout CustomerLayout
@rendermode InteractiveServer

@inject ITravelPackageService travelPackageService
@inject ICurrencyConverter currencyConverter

<link href="css/CustomColors.css" rel="stylesheet" />

<h3 class="text-primary-blue text-center">Browse Travelpackages</h3>

<TravelPackageSearch searchDTO="@SearchModel" OnSearch="FilterTravelPackages" />
<br />

<div class="d-flex justify-content-between align-items-center mb-3">
    <!-- Tabs for sorting -->
    <div class="flex-grow-1 me-3">
        <TravelPackageSortTab SelectedTab="@selectedTab" OnTabChanged="@SetTab" />
    </div>

    <!-- Valuta -->
    <div class="me-3" style="min-width: 150px; max-width: 200px; flex-shrink: 0;">
        <CurrencySelector SelectedCurrency="@SelectedCurrency" OnCurrencyChanged="HandleCurrencyChanged" />
    </div>

    <!-- Page size -->
    <div style="min-width: 100px; flex-shrink: 0;">
        <PageSizeSelector PageSize="@PageSize" OnPageSizeChanged="OnPageSizeChange" PageSizeOptions="new List<int> { 3, 6, 9, 12 }" />
    </div>
</div>

@if (isLoading)
{
    <p><em>Loading travelpackages...</em></p>
}
else if (isSearching)
{
    <p><em>Searching...</em></p>
}
else if (SearchResults == null || !SearchResults.Any())
{
    <p><strong>No travelpackages found.</strong></p>
}
else
{
    <p>Results: <strong>@resultCount</strong></p>
    <div class="container">
        <div class="row">
            @foreach (var package in PagedResults)
            {
                <TravelPackageCard package="@package" />
            }
        </div>
    </div>
    <Pagination CurrentPage="@CurrentPage" TotalPages="@TotalPages" OnPageChanged="HandlePageChanged" />
}

@code {
    // Parametre og injected services
    [Parameter] public string? Destination { get; set; }
    private Price.ISOCurrency SelectedCurrency = Price.ISOCurrency.DKK;

    // Søgemodel og resultater
    private TravelPackageSearchDTO SearchModel = new TravelPackageSearchBuilder()
      .WithDepartureDateEarliest(DateOnly.FromDateTime(DateTime.Now))
      .WithMinPrice(0)
      .WithMaxPrice(10000)
      .WithStatusOnly(TravelPackageStatus.Available)
      .Build();

    private List<TravelPackage>? SearchResults;
    private List<TravelPackage> PagedResults = new();
    private int resultCount;

    // UI-styring
    private string selectedTab = "earliest";
    private bool isLoading = true;
    private bool isSearching = false;

    // Pagination
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 9;
    private int TotalPages => (int)Math.Ceiling((double)(SearchResults?.Count ?? 0) / PageSize);

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Destination))
        {
            SearchModel.Destination = Destination;
            await FilterTravelPackages();
        }

        await LoadInitialPackages();
    }

    private async Task LoadInitialPackages()
    {
        isLoading = true;
        await FilterTravelPackages();
        isLoading = false;
    }

    private async Task FilterTravelPackages()
    {
        try
        {
            isSearching = true;
            var result = await travelPackageService.SearchAsync(SearchModel);
            SearchResults = result.ToList();
            resultCount = SearchResults.Count;
            CurrentPage = 1;
            UpdatePagedResults();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Noget gik galt: {ex.Message}");
        }
        finally
        {
            isSearching = false;
        }
    }

    private IEnumerable<TravelPackage> SortedTravelpackages =>
        selectedTab switch
        {
            "earliest" => SearchResults?.OrderBy(tp => tp.OutboundFlight.DepartureTime) ?? Enumerable.Empty<TravelPackage>(),
            "cheapest" => SearchResults?.OrderBy(tp => tp.Price.Amount) ?? Enumerable.Empty<TravelPackage>(),
            _ => SearchResults ?? Enumerable.Empty<TravelPackage>()
        };

    private void UpdatePagedResults()
    {
        PagedResults = SortedTravelpackages
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void OnPageSizeChange(int newSize)
    {
        PageSize = newSize;
        CurrentPage = 1;
        UpdatePagedResults();
    }

    private void SetTab(string tab)
    {
        selectedTab = tab;
        CurrentPage = 1;
        UpdatePagedResults();
    }

    private async Task HandlePageChanged(int newPage)
    {
        CurrentPage = newPage;
        UpdatePagedResults();
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleCurrencyChanged(Price.ISOCurrency newCurrency)
    {
        foreach (var travelPackage in PagedResults)
        {
            travelPackage.Price = currencyConverter.Convert(travelPackage.Price, newCurrency);
        }

        SelectedCurrency = newCurrency;
        await InvokeAsync(StateHasChanged);
    }
}
