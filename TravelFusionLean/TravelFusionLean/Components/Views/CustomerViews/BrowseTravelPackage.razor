@page "/Travelpackage-Browse"
@using Shared.Dtos
@using TravelFusionLean.Components.Layout.Customer
@layout CustomerLayout
@rendermode InteractiveServer

@using Shared.Models
@using Data
@using ServiceImplementations;
@using TravelFusionLean.Components.SmallComponents
@inject ITravelPackageService travelPackageService
@inject ICurrencyConverter currencyConverter

<link href="css/CustomColors.css" rel="stylesheet" />

<h3 class="text-primary-blue text-center">Browse Travelpackages</h3>

<TravelFusionLean.Components.SmallComponents.TravelPackageSearch searchDTO="@SearchModel" OnSearch="FilterTravelPackages"></TravelFusionLean.Components.SmallComponents.TravelPackageSearch>
<br />
<div class="d-flex justify-content-between align-items-center mb-3">
    <!-- Tabs for sorting -->
    <div class="flex-grow-1 me-3">
        <TravelPackageSortTab SelectedTab="@selectedTab" OnTabChanged="@SetTab" />
    </div>
    <!-- Dropdown for valuta -->
    <div class="me-3" style="min-width: 150px; max-width: 200px; flex-shrink: 0;">
        <CurrencySelector SelectedCurrency="@SelectedCurrency" OnCurrencyChanged="HandleCurrencyChanged" />
    </div>
    <!-- Dropdown for page size -->
    <div style="min-width: 100px; flex-shrink: 0;">
        <PageSizeSelector PageSize="@PageSize" OnPageSizeChanged="@(size => OnPageSizeChange(size))" />
    </div>
</div>

@code {
    private string selectedTab = "earliest";

    private void SetTab(string tab)
    {
        selectedTab = tab;
        CurrentPage = 1;
        StateHasChanged();
    }
    private void OnPageSizeChange(int newSize)
    {
        PageSize = newSize;
        CurrentPage = 1;
        StateHasChanged();
    }
    private IEnumerable<TravelPackage> PagedTravelPackages => SortedTravelpackages?.Skip((CurrentPage - 1) * PageSize).Take(PageSize) ?? Enumerable.Empty<TravelPackage>();
    private IEnumerable<TravelPackage> SortedTravelpackages =>
        selectedTab switch
        {
            "earliest" => SearchResults?.OrderBy(tp => tp.OutboundFlight.DepartureTime) ?? Enumerable.Empty<TravelPackage>(),
            "cheapest" => SearchResults?.OrderBy(tp => tp.Price.Amount) ?? Enumerable.Empty<TravelPackage>(),

            _ => SearchResults ?? Enumerable.Empty<TravelPackage>()
        };
}


@code 
{
    private TravelPackageSearchDTO SearchModel = new()
    {
        DepartureDateEarliest = DateOnly.FromDateTime(DateTime.Now),
        MinPrice = 0,
        MaxPrice = 10000
    };

    private List<TravelPackage>? SearchResults;
    private int resultCount;
    private bool isLoading = true;
    private bool isSearching = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialPackages();
    }

    private async Task LoadInitialPackages()
    {
        isLoading = true;
        await FilterTravelPackages();
        isLoading = false;
    }

    private async Task FilterTravelPackages()
    {
        try
        {
            isSearching = true;
            var result = await travelPackageService.SearchAvailableAsync(SearchModel);
            SearchResults = result.ToList();
            resultCount = SearchResults.Count;
        }
        catch (Exception ex)
        {
            string errorMessage = $"Noget gik galt: {ex.Message}";
        }
        finally
        {
            isSearching = false;
        }
    }
}


  @if (isLoading)
{
    <p><em>Loading travelpackages...</em></p>
}
else if (isSearching)
{
    <p><em>Searching...</em></p>
}
else if (SearchResults == null || !SearchResults.Any())
{
    <p><strong>No travelpackages found.</strong></p>
}
else
{
    <p>Results: <strong>@resultCount</strong></p>
    <div class="container">
        <div class="row">
            @foreach (TravelPackage package in PagedTravelPackages)
            {
                <div class="col-md-4 mb-4">
                    <div class="card @(package.IsRecommended == true ? "recommended-package" : "")">
                        <img loading="lazy" src="@(!string.IsNullOrEmpty(package.ImagePath) ? package.ImagePath : "/images/WineOnBeach.png")" alt="Travel Package Image" class="card-img-top" style="height: 200px; object-fit: cover;">
                        <div class="card-body">
                            <h5 class="card-title"> @package.Headline</h5>
                            <p class="card-text">
                                @if (!string.IsNullOrEmpty(package.Description))
                                {
                                    var truncated = package.Description.Length > 100 ? package.Description.Substring(0, 95) + "..." : package.Description;
                                    @truncated
                                }
                            </p>
                            <p><strong>Antal rejsende:</strong> @package.NoOfTravellers</p>
                            <p><strong>Pris:</strong> @package.Price</p>
                            <a class="btn btn-sm btn-primary me-1" href="/travelpackages/details/@package.Id">Vis mere</a>
                            <a class="btn btn-sm btn-primary me-1" href="/MakeBooking/@package.Id">Book</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <Pagination CurrentPage="@CurrentPage" TotalPages="@TotalPages" OnPageChanged="HandlePageChanged" />
}

 @code {
    private int TotalPages => (int)Math.Ceiling((double)(SearchResults?.Count ?? 0) / PageSize);
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;

    private async Task HandlePageChanged(int newPage)
    {
        CurrentPage = newPage;
        await InvokeAsync(StateHasChanged);
    }

    private Price.ISOCurrency SelectedCurrency = Price.ISOCurrency.DKK;
    private async Task HandleCurrencyChanged(Price.ISOCurrency newCurrency)
    {
        foreach (TravelPackage travelPackage in PagedTravelPackages)
        {
            travelPackage.Price = currencyConverter.Convert(travelPackage.Price, newCurrency);
        }
    }
 }