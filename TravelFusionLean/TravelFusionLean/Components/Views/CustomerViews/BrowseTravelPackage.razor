@page "/Travelpackage-Browse"
@using Shared.Dtos
@using TravelFusionLean.Components.Layout.Customer
@layout CustomerLayout
@rendermode InteractiveServer

@using Shared.Models
@using Data
@using ServiceImplementations;
@inject ITravelPackageService travelPackageService

<h3>Browse TravelPackage</h3>

<div>
    <label for="departureLocation">Afrejsested (by eller land):</label>
    <input type="text" id="departureLocation" @bind="DepartureLocation" placeholder="F.eks. Danmark eller København" />

    <label for="destination">Destination (by eller land):</label>
    <input type="text" id="destination" @bind="destinationSearch" placeholder="F.eks. Paris eller Frankrig" />

    <label for="dateFrom">Tidligste afrejsedato:</label>
    <input type="date" id="dateFrom" @bind="startDateSearch" />

    <label for="travelers">Antal rejsende:</label>
    <input type="number" id="travelers" @bind="NoOfTravelers" min="1" />

    <label for="priceFrom">Pris (min):</label>
    <input type="number" id="priceFrom" @bind="priceFromSearch" />

    <label for="priceTo">Pris (maks):</label>
    <input type="number" id="priceTo" @bind="priceToSearch" />

    <br />
    <button @onclick="SearchTravelPackages">Søg</button>
</div>
<br />

@code{
    private string? DepartureLocation;
    private string? destinationSearch;
    private DateOnly? startDateSearch = DateOnly.FromDateTime(DateTime.Now);
    private int? NoOfTravelers;
    private decimal priceFromSearch = 0;
    private decimal priceToSearch = 10000;

    private string noResultsMessage = "";
    private bool IsSearching = false;

    private async Task SearchTravelPackages() 
    {
        IsSearching = true;
        TravelPackageSearchDTO searchDTO = new TravelPackageSearchDTO();

        searchDTO.DepartureLocation = DepartureLocation;
        searchDTO.Destination = destinationSearch;
        searchDTO.DepartureDateEarliest = startDateSearch;
        searchDTO.NumberOfTravelers = NoOfTravelers;
        searchDTO.MinPrice = priceFromSearch;
        searchDTO.MaxPrice = priceToSearch;

        var result = await travelPackageService.SearchAvailableAsync(searchDTO);
        _travelPackages = result.ToList();
        resultCount = _travelPackages.Count;
        IsSearching = false; 

        if (_travelPackages.Count == 0)
        {
            noResultsMessage = "Ingen rejsepakker matchede dine kriterier."; // Besked til brugeren
        }
        else
        {
            noResultsMessage = ""; // Hvis der er fundet resultater, nulstil beskeden
        }
    }
}

@code {
    private List<TravelPackage> _travelPackages;
    private int resultCount;
    private bool _hasLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTravelPackages();
            StateHasChanged(); // Tving re-render efter data er hentet
            _hasLoaded = true;
        }
    }

    private async Task LoadTravelPackages()
    {
        _travelPackages = (await travelPackageService.GetAvailableAsync()).ToList();
        resultCount = _travelPackages.Count;
    }
}



  @if (_travelPackages == null)
{
    <p><em>Loading travelpackages...</em></p>
}
else if (IsSearching == true){
    <p><em>Searching</em></p>
}
else if (!_travelPackages.Any())
{
    <p>No hotels found.</p>
}
else
{
    <p>results: @resultCount</p>
    <div class="container">
        <div class="row">
            @foreach (var package in _travelPackages)
            {
                <div class="col-md-4 mb-4">
                    <div class="card @(package.IsRecommended == true ? "recommended-package" : "")">
                        <img loading="lazy" src="@(!string.IsNullOrEmpty(package.ImagePath) ? package.ImagePath : "/images/WineOnBeach.png")" alt="Travel Package Image" class="card-img-top" style="height: 200px; object-fit: cover;">
                        <div class="card-body">
                            <h5 class="card-title">@package.Headline</h5>
                            <p class="card-text">
                                @if (!string.IsNullOrEmpty(package.Description))
                                {
                                    var truncatedDescription = package.Description.Length > 100 ? package.Description.Substring(0, 100) + "..." : package.Description;
                                    @truncatedDescription
                                }
                            </p>
                            <p><strong>Antal Rejsende:</strong> @package.NoOfTravellers</p>
                            <p><strong>Pris:</strong> @package.Price.ToString()</p>
                            <a class="btn btn-sm btn-primary me-1" href="/travelpackages/details/@package.Id">Show more</a>
                            <a class="btn btn-sm btn-primary me-1" href="/MakeBooking/@package.Id">Book</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}