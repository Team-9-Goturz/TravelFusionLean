@page "/"
@using TravelFusionLean.Components.Layout.Customer
@using TravelFusionLean.Components.SmallComponents
@using Shared.Dtos
@using Shared.Models
@using ServiceImplementations
@layout CustomerLayout
@attribute [StreamRendering]
@inject NavigationManager NavManager
@inject ITravelPackageService travelPackageService

@rendermode InteractiveServer

<PageTitle>Welcome</PageTitle>

<link href="css/CustomColors.css" rel="stylesheet" />
<link href="css/destinationCard.css" rel="stylesheet" />

<!-- Content directly inside layout's content area -->
<div class="px-4 py-5">
    <div class="card p-5 shadow-sm" style="border-radius: 16px;">
        <div class="text-center">
            <div class="mb-3">
                <span class="animated-globe">🌍</span>

            </div>


            <h1 class="text-primary fw-bold mb-3">Welcome to Gotorz!</h1>
            <p class="lead mb-4">
                Find your perfect travel package – fast, flexible, and fun!
            </p>

            <hr class="my-4" />

            <div class="d-flex justify-content-center gap-3 flex-wrap">
                <NavLink href="/Travelpackage-Browse" class="btn btn-primary px-4 py-2" activeClass="active">Explore Packages</NavLink>
                <NavLink href="/about" class="btn btn-outline-primary px-4 py-2" activeClass="active">Learn More</NavLink>
            </div>

        </div>

    </div>

    <br />
    <br/>
    <h3>The best of the best travel destinations</h3>
    <div class="card-row">
        <DestinationCard Destination="Greece" ImagePath="images/Greece.jpg" Label="Greece" />
        <DestinationCard Destination="Egypt" ImagePath="images/Egypt.jpg" Label="Egypt" />
        <DestinationCard Destination="France" ImagePath="images/France.jpg" Label="France" />
        <DestinationCard Destination="Thailand" ImagePath="images/thailand.jpg" Label="Thailand" />
        <DestinationCard Destination="Maldives" ImagePath="images/Maldives.jpg" Label="Maldives" />
        <DestinationCard Destination="Italy" ImagePath="images/Venedig.jpg" Label="Italy" />
        <DestinationCard Destination="Japan" ImagePath="images/Japan.jpg" Label="Japan" />
    </div>

</div>

@code 
{
    private void NavigateToDestination(string destination)
    {
        NavManager.NavigateTo($"/Travelpackage-Browse/{destination}");
    }
}



@* Rejser med snarlig afrejse *@
<h3>Book Before They're Gone – Last-Minute Deals</h3>
<div class="card-row">
    @if (LeavingSoonTravelPackage is not null)
    {
        @foreach (var package in LeavingSoonTravelPackage)
        {
            <TravelPackageCard package="@package" />
        }
    }
</div>

@* Anbefalede rejser *@
<h3>Top Travel Picks – Just for You</h3>
<div class="card-row">
    @if (RecommendedTravelPackage is not null)
    {
        @foreach (var package in RecommendedTravelPackage)
        {
            <TravelPackageCard package="@package" />
        }
    }
</div>

@code {
    private List<TravelPackage> LeavingSoonTravelPackage { get; set; } = new();
    private List<TravelPackage> RecommendedTravelPackage { get; set; } = new();

    private readonly int maxDaysToDeparture = 7;

    private readonly TravelPackageSearchDTO searchLeavingSoon = new TravelPackageSearchBuilder()
       .WithDepartureDateEarliest(DateOnly.FromDateTime(DateTime.Today))
       .WithDepartureDateLatest(DateOnly.FromDateTime(DateTime.Today.AddDays(7)))
       .Build();

    private readonly TravelPackageSearchDTO searchRecommended = new TravelPackageSearchBuilder()
     .WithDepartureDateEarliest(DateOnly.FromDateTime(DateTime.Today))
     .WithRecommendedOnly()
     .Build();

    protected override async Task OnInitializedAsync()
    {
        var leavingSoonResult = await travelPackageService.SearchAvailableAsync(searchLeavingSoon);
        var recommendedResult = await travelPackageService.SearchAvailableAsync(searchRecommended);

        LeavingSoonTravelPackage = leavingSoonResult.ToList();
        RecommendedTravelPackage = recommendedResult.ToList();
    }
}
